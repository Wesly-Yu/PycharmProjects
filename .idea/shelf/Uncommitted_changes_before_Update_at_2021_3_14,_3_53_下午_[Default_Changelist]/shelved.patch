Index: Base/helium_keyWordRecognize.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport logging\nfrom  Base.buildPythonScript import bulidPythonScript\nfrom  Base.modifyLocator import modify_locator\nfrom pathlib import Path\n\nclass ActionMethod():\n    logging.info(\"执行关键字识别\")\n    def execute_keyword(self,projectPath,packageName,caseName,keyword,*args):\n        if str(keyword)== '打开':\n            url = str(args[0])\n            writeKeyWord = \"self.page.goto(\"+url+\")\"\n            bulidPythonScript.addTestScriptMethod(projectPath,packageName,caseName,writeKeyWord)\n        elif str(keyword)== '点击':\n            element=str(args[0])\n            modify_element=modify_locator(element)\n            writeKeyWord =\"self.page.click(\"+modify_element+\")\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword)== '等待':\n            time = str(args[0])+\"000\"\n            writeKeyWord = \"self.page.waitForTimeout(\"+time+\")\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword)== '输入':\n            element=args[0]\n            modify_element = modify_locator(element)\n            inputString=str(args[1])\n            cleanWord = \"self.page.fill(\"+modify_element+\",'')\"\n            writeKeyWord = \"self.page.type(\"+modify_element+\",\"+inputString+\")\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, cleanWord)\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword)== '滑动到页面中间':\n            element = args[0]\n            modify_element = modify_locator(element)\n            times= args[1]\n            writeKeyWord=\"self.page.querySelector(\"+modify_element+\").scrollIntoViewIfNeeded()\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword)== '存在':\n            element = args[0]\n            modify_element = modify_locator(element)\n            times = args[1]\n            writeKeyWord = \"self.page.querySelector(\" + modify_element + \").waitForElementState('visible', \" + times + \")\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword) == '获取文本':\n            element = args[0]\n            modify_element = modify_locator(element)\n            returnResult=args[1]\n            writeKeyWord =returnResult+\"=self.page.querySelector(\"+modify_element+\").textContent()\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword) == '打印':\n            element = args[0]\n            writeKeyWord =\"print(\"+element+\")\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        elif str(keyword) == '切换':\n\n        elif str(keyword) == '点击截图':\n\n        elif str(keyword) == '上一步':\n            writeKeyWord = \"self.page.goBack()\"\n            bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)\n        else:\n            print(\"无法执行没有的关键字\")\n            logging.info(\"无法执行没有的关键字\")\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Base/helium_keyWordRecognize.py b/Base/helium_keyWordRecognize.py
--- a/Base/helium_keyWordRecognize.py	(revision a2eb1ff315dc5bc12ab2590f18639f60db4b9fc9)
+++ b/Base/helium_keyWordRecognize.py	(date 1615647203061)
@@ -2,19 +2,27 @@
 import logging
 from  Base.buildPythonScript import bulidPythonScript
 from  Base.modifyLocator import modify_locator
-from pathlib import Path
+from getConfig import *
+
 
 class ActionMethod():
     logging.info("执行关键字识别")
     def execute_keyword(self,projectPath,packageName,caseName,keyword,*args):
         if str(keyword)== '打开':
-            url = str(args[0])
-            writeKeyWord = "self.page.goto("+url+")"
-            bulidPythonScript.addTestScriptMethod(projectPath,packageName,caseName,writeKeyWord)
+            if browser=="chrome":
+                url = str(args[0])
+                head=cf.get('Options', 'headless')
+                writeKeyWord = "start_chrome("+url+",options=self.ChromeOptions,headless="+head+")"
+                bulidPythonScript.addTestScriptMethod(projectPath,packageName,caseName,writeKeyWord)
+            else:
+                url = str(args[0])
+                head=cf.get('Options', 'headless')
+                writeKeyWord = "start_firefox("+url+",options=self.FireFoxOptions,headless="+head+")"
+                bulidPythonScript.addTestScriptMethod(projectPath,packageName,caseName,writeKeyWord)
         elif str(keyword)== '点击':
             element=str(args[0])
             modify_element=modify_locator(element)
-            writeKeyWord ="self.page.click("+modify_element+")"
+            writeKeyWord ="click("+modify_element+")"
             bulidPythonScript.addTestScriptMethod(projectPath, packageName, caseName, writeKeyWord)
         elif str(keyword)== '等待':
             time = str(args[0])+"000"
Index: Base/modifyLocator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Base/modifyLocator.py b/Base/modifyLocator.py
new file mode 100644
--- /dev/null	(date 1615643871938)
+++ b/Base/modifyLocator.py	(date 1615643871938)
@@ -0,0 +1,11 @@
+def modify_locator(elementPath):
+    if elementPath.find('"'):
+        newPath=elementPath.replace('"',"'")
+        return newPath
+
+
+
+if __name__ == '__main__':
+    locator='a[name="tj_login"]'
+    result =modify_locator(locator)
+    print(result)
\ No newline at end of file
Index: Base/buildPythonScript.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Base/buildPythonScript.py b/Base/buildPythonScript.py
new file mode 100644
--- /dev/null	(date 1615646407950)
+++ b/Base/buildPythonScript.py	(date 1615646407950)
@@ -0,0 +1,55 @@
+import os
+import sys
+
+class bulidPythonScript():
+    def initClassMethod(self,projectPath,packageName,browserType,execType):
+        Dirpath = projectPath+"/"+packageName+".py"
+        classHeader = "class" + " " + packageName + "(unittest.TestCase):"
+        classInitChromeBrowser="ChromeOptions = ChromeOptions()"
+        classInitFireFoxBrowser = "FireFoxOptions = FirefoxOptions()"
+        classInitEdgeBrowser = "EdgeOptions = WebKitGTKOptions()"
+        classInitMaxPage="options.add_argument('--start-maximized')"
+        with open(Dirpath, 'a+', encoding="utf-8") as f:
+            f.write(classHeader+'\n')
+            f.write('\t'+classInitChromeBrowser+"\n")
+            f.write('\t'+classInitFireFoxBrowser+"\n")
+            f.write('\t'+classInitEdgeBrowser+"\n")
+            f.write('\t' + classInitMaxPage + "\n")
+    def addTailMethod(self,projectPath,packageName,caseList):
+        Dirpath = projectPath + "/" + packageName + ".py"
+        classMain = "if __name__ == '__main__':"
+        classSuit = "suit = unittest.TestSuite()"
+        with open(Dirpath, 'a+', encoding="utf-8") as f:
+            f.write(classMain + '\n')
+            f.write('\t'+classSuit+'\n')
+            for casename in range(len(caseList)):
+                case_name = caselist[casename]
+                addTest="suit.addTest("+packageName+"("+"'"+case_name+"'"+"))"
+                f.write('\t'+addTest+'\n')
+            addRunner = "runner = unittest.TextTestRunner()"
+            addSuitRunner="runner.run(suit)"
+            f.write('\t'+addRunner+'\n')
+            f.write('\t'+addSuitRunner+'\n')
+    def addTestScriptMethod(self,projectPath,packageName,caseName,step):
+        Dirpath = projectPath + "/" + packageName + ".py"
+        caseNameMethod = "def"+" "+caseName+"(self):"
+        with open(Dirpath, 'a+', encoding="utf-8") as f:
+            f.write('\t'+caseNameMethod+'\n')
+            f.write('\t'+'\t'+step+'\n')
+
+
+
+
+
+
+
+
+if __name__ == '__main__':
+    projectPath="/Users/yupeng55/Documents/project/PycharmProjects/Base"
+    packageName="zhuangba"
+    caselist=['first_script','second_script']
+    bp=bulidPythonScript()
+    bp.initClassMethod(projectPath,packageName,"chromium","headless")
+    bp.addTailMethod(projectPath, packageName,caselist)
+
+
Index: resource/config.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resource/config.ini b/resource/config.ini
new file mode 100644
--- /dev/null	(date 1615645332897)
+++ b/resource/config.ini	(date 1615645332897)
@@ -0,0 +1,7 @@
+[Options]
+browser=chrome
+headless=True
+options=Chromeoptions
+[Email]
+host=
+address=1633235633@qq.com
